openapi: 3.0.3
info:
  title: Internet.nl Batch Scan API
  description: "
  Batch scan multiple domains for compliance with modern internet standards.

  ## How to get access

  The API can be accessed by sending a request for access to the help desk. Policies may apply for being granted access.

  ## Alternatives

  The internet.nl dashboard implements this API. This is developed by internet.nl and comes with all kinds of features
  such as recurring scans, reports, comparisons and more. See our contact information to request access.

  ## Implementation guide

  Several fields in this API can be used as JavaScript or Python symbols. As such they are easy to parse and use.
  If you want direct access to the test results, parse the results from a list to a dict, where the key is the test name.

  For example:
  ```
    from collections import defaultdict

    accessible_results = defaultdict(dict)
    for result in retrieved_results:
     accessible_results[result['test']] = result

    print(accessible_results['web_ipv6_ns_address']['verdict'])
  ```

  todo:

  "
  termsOfService: "http://api.internet.nl/v2/terms.html"
  contact:
    name: Internet.nl Helpdesk
    email: vraag@internet.nl
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: '2.0'
  x-logo:
    url: "https://www.internet.nl/static/logo_en.svg"
    backgroundColor: "#FAFAFA"
    altText: "Internet.nl logo"
servers:
- url: https://api.internet.nl/v2
  description: Production server
- url: https://test.api.internet.nl/v2
  description: Development server
components:
  securitySchemes:
    basic:
      type: http
      scheme: basic
  schemas:
    scan_id:
      type: string
      format: "^[0-9abcdef]{32}$"
      example: f284049256dd4ca793edbcd4ae41759a
    tracking_information:
      description: Serves as a reference for the requester. Does not need
        to be unique. Can be any string value except JSON identifiers.
      example: "{'name': 'My scan 1337', 'id': '42'}"
      type: string
    test_id:
      description: 'There can be more metadata than only the results and derived
                    results. For example: each level of the test hierarchy can be defined
                    in this metadata.'
      type: string
      format: "^[a-z_]*$"
      example: web_ipv6_ns_address
    scan_type:
      type: enum
      enum:
        - web
        - mail
    domain:
      description: A single domain, which can include several levels of subdomains.
      type: string
      format: ^.?*\..*?$
      example: api.internet.nl
    list_of_domains:
      description: 'List of domains to scan.'
      example:
        - internet.nl
        - api.internet.nl
        - dashboard.internet.nl
        - nic.商标
      type: array
      items:
        type: string
    ScanMetadata:
      type: object
      properties:
        tracking_information:
          $ref: '#/components/schemas/tracking_information'
        scan_type:
          $ref: '#/components/schemas/scan_type'
        api_version:
          type: string
          example: '2'
        submission_date:
          type: string
          format: date-time
        finished_date:
          type: string
          format: date-time
          description: Only set when the scan is finished.
    Scan:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/scan_id'
        message:
          type: string
          enum:
            - scan created
        metadata:
          "$ref": "#/components/schemas/ScanMetadata"
    ScanStatus:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/scan_id'
        message:
          type: "string"
          enum:
            # This is the normal scan progression, without errors
            - Batch request is registering domains
            - Batch request is running
            - Report is being generated
            # This used to be "OK", but that's not verbose enough.
            - Batch request finished

            # Error situations return a message:
            - Unknown batch request
            - Error while registering the domains
            - Results could not be generated
            - Batch request was cancelled by user
            - Problem parsing domains
        metadata:
          $ref: '#/components/schemas/ScanMetadata'
    ScanResult:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/scan_id"
        metadata:
          "$ref": "#/components/schemas/ScanMetadata"
        domains:
          type: object
          description: "Domains are only scanned once, which make them usable as a key for accessing information."
          properties:
            domain:
              $ref: '#/components/schemas/domain'
            status:
              description: "A domain could not be scanned for various reasons. If the domain is not scanned, it will be
              noted here. In that case all other properties will not be present."
              type: enum
              enum:
              - success
              # This used to be fail, but that does not make clear what has happened.
              - could_not_be_scanned
            score:
              description: "The score of a domain"
              type: object
              properties:
                percentage:
                  description: "The score of a domain. The score runs from 0 to 100, where 0 is bad and 100 is perfect.
                  The score is a complex calculation based on all test results included. This calculation can change
                  over time, depending on changing or new tests."
                  type: integer
                  example: 80
            report:
              description: "Information to help retrieve report information of this test at internet.nl"
              type: object
              properties:
                id:
                  description: "The ID of the test at internet.nl. This can be used to view a report for your scan at internet.nl"
                  type: integer
                address:
                  description: "Direct url to the report on internet.nl."
                  type: string
                  format: url
                  example: "https://api.internet.nl/web/api.internet.nl/4423123/"
            results:
              description: ""
              type: array
              items:
                "$ref": "#/components/schemas/Result"
            derived_results:
              type: array
              description: "A derived result is a result created based on a number of calculations of other results.
              A derived result shares the same result format. Its uses are for example to derive a conclusion about
              a group of results into a single result (such as a category like 'IPv6')."
              items:
                "$ref": "#/components/schemas/Result"

    ResultMetaData:
      description: Contains extensive information on how scan results can be represented
        in reports. Describes scan results.
      type: array
      items:
        type: object
        description: Description of the test, with documentation and such.
        externalDocs:
          url: https://api.internet.nl/v2.0/documentation/results
        properties:
          # This was suggested to be called "sub_test". This has been removed due to the hierarchy not being relevant.
          # In common conversations these things are also called tests. And the road to sub_sub_sub test is not one
          # that we want to go to.
          test:
            $ref: '#/components/schemas/test_id'
          description:
            type: string
            description: "Free formatted text to briefly describe the test. Refer to documentation for verbose information."
            example: "IPv6 addresses for name servers"
          documentation:
            type: string
            description: Resource location of the documentation of the field. Shows
              what all possible values can be.
            example: "https://api.internet.nl/v2/documentation/results#mail_ipv6_ns_address"
            format: uri
          verdict_test_result_mapping:
            description: "All possible verdicts a test can have. The verdicts map to translations which contain an extended explanation of the result. The test_result is a classification of the verdict."
            type: object
            additionalProperties:
              type: object
              properties:
                verdict:
                  type: string
                  format: "^[a-z_]$"
                test_result:
                  type: string
                  format: "^[a-z_]$"
            required: verdict, test_result
            example:
              good: pass
              bad: fail
              other: fail
              bad_unsupported_ds_algo: fail
              not_tested: not_tested
              # todo: pass_with_phase_out?
              phase_out: pass
        allOf:
          - $ref: '#/components/schemas/verbose_properties'

    verbose_properties:
      properties:
        hierarchy:
          type: object
          description: The hierarchy contains the order of tests on internet.nl.
            The hierarchy is stored separately from the data, to make parsing of
            data easier. The hierarchy might change over versions, while tests names
            stay the same.
          properties:
            human:
              description: A loosely describing and structured format that explains
                the system hierarchy to humans. This helps understanding the place
                of a test.
              example: "/web/ipv6/nameserver/address"
              type: string
            system:
              description: The system hierarchy is a comparable list of integers.
                When ordered from small to large, the same order is created as used
                on internet.nl and the internet.nl dashboard. If something is four levels deep, there are four levels where the correct order is being maintained.
              type: array
              example:
                - 1
                - 1
                - 1
                - 1
              items:
                type: integer
        translation:
          type: object
          description: "Information to retrieve the correct translation from the
            internet.nl sources. This can be used to translate the scan (title,
            description, technical_details), as well as the result when used in
            conjunction with the verdict key. Todo: where can implementations find the translations?"
          properties:
            key:
              type: string
              example: web-mail_ipv6_ns-AAAA

    ScanError:
      type: object
      properties:
        message:
          type: string
          default: 'Error: '
    Result:
      type: object
      properties:
        test:
          $ref: '#/components/schemas/test_id'
        verdict:
          description: "The plain result of a test. This result can also be used for translation."
          type: string
          format: "^[a-z_]$"
          enum:
          - bad_unsupported_ds_algo
          - bogus
          - good
          - na
          - not_tested
          - ok
          - other
          - phase_out
          - resolver_error
          - seclevel_bad
          - servfail
          - warning
        test_result:
          description: "Classifies the result to how a result should be represented. Is provided for convenience, as the test_result can also be derived from the mapping in the metadata."
          type: string
          format: "^[a-z_]$"
          enum:
            - pass
            - fail
            - info
            - warning
            - not_applicable
            - not_tested
        icon: 
          type: string
          description: "Allows tests and derived tests to specify an icon to match the test. This is usually something that matches the test result, but can deviate in edge cases."
          example: "category_passed"
        translation:
          description: "Key to translate the verdict, used together with the translation key."
          type: object
          properties:
            result:
              type: string
        technical_details:
          type: object
          properties:
            data_matrix:
              description: "A table with data. Use the translation key + tech_table to retrieve the column names of the data. The data can have a several columns and rows."
              type: array
              items:
                type: array
                items:
                  description: "Actual values are represented as strings."
                  type: string
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
paths:
  # Dutch API spec requires the plural form to be used.
  "/scans":
    post:
      security:
        - basic: []
      description: 'Creates a new scan.'
      operationId: create
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/scan_type'
                tracking_information:
                  $ref: '#/components/schemas/tracking_information'
                domains:
                  $ref: '#/components/schemas/list_of_domains'
              required:
              - domains
              - type
      responses:
        '200':
          description: Scan created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Scan"
          links:
            status:
              operationId: status
              parameters:
                scan_id: '$response.body#/id'
              description: The scan_id retrieved from creating a scan can be used to retrieve the status and scan result.
        '500':
          description: Scan creation error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ScanError"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  "/scans/metadata/":
    get:
      security:
        - basic: []
      operationId: metadata
      description: 'Get''s machine readable metadata on: documentation, translation,
        display etc. This can be used to create reports equivalent to internet.nl.'
      responses:
        '200':
          description: Metadata information of a scan. This applies to all fields.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultMetaData"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  "/scans/status/{scan_id}":
    get:
      security:
        - basic: []
      operationId: status
      description: 'Retrieve information about the progress of the scan.'
      parameters:
      - name: scan_id
        schema:
          $ref: '#/components/schemas/scan_id'
        in: path
      responses:
        '200':
          description: Track the status of a scan.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ScanStatus"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  "/scans/result/{scan_id}":
    get:
      security:
        - basic: []
      operationId: result
      description: Retrieve scan result information.
      x-code-samples:
        lang: Python
        source: console.log('Hello World');
      parameters:
      - name: scan_id
        schema:
          $ref: '#/components/schemas/scan_id'
        in: path
      responses:
        '200':
          description: Scan result
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ScanResult"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
