openapi: 3.0.3
info:
  title: Internet.nl Batch Scan API
  description: "
  Batch scan multiple domains for compliance with modern internet standards.

  ## Requesting access

  Send a request for access to the help desk.

  ## Dashboard or API?

  Internet.nl provides a dashboard. If you don't want to implement this API, but do want batch scanning, this is the
  option for you. The dashboard comes with a series of features that you might convenient. Such as:

  * periodical batch scans

  * domain and list management

  * scan tracking

  * extensive reporting, including:

  ** comparisons to other reports

  ** graphs

  ** metrics in tables

  * export options (excel, ods, csv)


  Requesting access to the dashboard can be done by contacting the help desk.


  ## Implementation tips

  Domains and tests are used as keys. This helps with quickly parsing fields, as the right data can quickly be found.

  For example:

  To get the test result for a certain domain (python):


  `results['domains']['internet.nl']['results']['web_ipv6_ns_address']['test_result']`


  To get all domains in a test (javascript):


  `Object.keys(results['domains'])`


  ### OpenAPI

  * http://spec.openapis.org/oas/v3.0.3

  * https://geonovum.github.io/API-Designrules/  (Werkversie 17 januari 2020)


  Rendering this file to html:

  ```npx redoc-cli bundle openapi.yaml```


  ## Todo

  * Where can new implementations find translations, how can they adopt it quickly? This should be added somewhere.

  * Verify: are there more reasons why a domain could not be scanned? (the status field of a domain is somewhat empty)

  * Are the API endpoint links correct? They are now: api.internet.nl/v2

  * Design decision: Will pass + phase out have a different icon or translation?

  * Add new mail tests to changelog when available.

  * Where will the docs per field be? With all possible results and explanations?

  * Construct metadata


  ## Changelog

  ### V2

  * New API with focus on extensibility and easier consuming. With extra metadata

  * Added new web tests: web_https_tls_cipher_order, web_https_tls_keyexchange_hash_function, web_https_tls_zero_rtt, web_https_tls_ocsp_stapling

  * Added new mail tests: [TODO]

  "
  termsOfService: "http://api.internet.nl/v2/terms.html"
  contact:
    name: Internet.nl Help desk
    email: vraag@internet.nl
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: '2.0'
  x-logo:
    url: https://www.internet.nl/static/logo_en.svg
    backgroundColor: "#FAFAFA"
    altText: Internet.nl logo
servers:
  - url: https://api.internet.nl/v2
    description: Production server
  - url: https://test.api.internet.nl/v2
    description: Development server
components:
  securitySchemes:
    basic:
      type: http
      scheme: basic
  schemas:
    scan_id:
      type: string
      format: "^[0-9abcdef]{32}$"
      description: Randomly generated id, use this to request the state and result of your scan.
      example: f284049256dd4ca793edbcd4ae41759a
    tracking_information:
      description: Serves as a reference for the requester. Does not need
        to be unique. Can be any string value except JSON identifiers.
      example: "{'name': 'My scan 1337', 'id': '42'}"
      type: string
    test_id:
      allOf:
        - $ref: '#/components/schemas/identifier'
      description: Identifier for a specific test.
      example: web_ipv6_ns_address
    identifier:
      type: string
      format: "^[a-z_]*$"
    scan_type:
      type: enum
      enum:
        - web
        - mail
    domain:
      description: A single domain, which can include several levels of subdomains.
      type: string
      format: ^.?*\..*?$
      example: api.internet.nl
    list_of_domains:
      description: List of domains to scan.
      example:
        - internet.nl
        - api.internet.nl
        - dashboard.internet.nl
        - nic.商标
      type: array
      items:
        type: string
    scan_metadata:
      type: object
      properties:
        tracking_information:
          $ref: '#/components/schemas/tracking_information'
        scan_type:
          $ref: '#/components/schemas/scan_type'
        api_version:
          type: string
          example: '2'
        submission_date:
          type: string
          format: date-time
        finished_date:
          type: string
          format: date-time
          description: Only set when the scan is finished.
    Scan:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/scan_id'
        # Design decision:
        # a message is not needed. The ID itself is the status code says a scan has been registered.
        metadata:
          "$ref": "#/components/schemas/scan_metadata"
    scan_status:
      type: object
      description: Successful scan progress is indicated with the status running and finished.
      properties:
        id:
          $ref: '#/components/schemas/scan_id'
        status:
          type: enum
          enum: ["finished", "running"]
        message:
          type: "string"
          enum:
            # This is the normal scan progression, without errors
            - Batch request is registering domains
            - Batch request is running
            - Report is being generated
            # Design decision:
            # This used to be "OK", but that's not verbose enough.
            - Batch request finished, report available
        metadata:
          $ref: '#/components/schemas/scan_metadata'
    scan_error_status:
      type: object
      description: In case an error occurs, the state is set to error and different messages may occur.
      properties:
        id:
          $ref: '#/components/schemas/scan_id'
        status:
          type: enum
          enum: ["error"]
        message:
          type: "string"
          enum:
            - Unknown batch request
            - Error while registering the domains
            - Results could not be generated
            - Batch request was cancelled by user
            - Problem parsing domains
        metadata:
          $ref: '#/components/schemas/scan_metadata'
    scan_result:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/scan_id"
        metadata:
          "$ref": "#/components/schemas/scan_metadata"
        domains:
          type: object
          additionalProperties:
            x-additionalPropertiesName: domain
            description: Domains names are unique, and are used as the key to accessing information. Retrieve all returned domains by getting the keys from the domains object.
            properties:
              # Design decision:
              # This is now a key. Open API specification does not allow to name or specify keys.
              # Therefore the domain is not in the results. This also forces a domain to be unique when returned, which was also part of the 1.0 design.
              # domain:
              #   $ref: '#/components/schemas/domain'
              status:
                description: A domain could not be scanned for various reasons. If the domain is not scanned, it will be noted here. In that case all other properties will not be present.
                type: enum
                enum:
                  - success
                  # This used to be fail, but that does not make clear what has happened.
                  - could_not_be_scanned
              score:
                description: The score of a domain
                type: object
                properties:
                  percentage:
                    description: "The score of a domain. The score runs from 0 to 100, where 0 is bad and 100 is perfect.
                    The score is a complex calculation based on all test results included. This calculation can change
                    over time, depending on changing or new tests."
                    type: integer
                    example: 80
              report:
                description: Information to help retrieve report information of this test at internet.nl
                type: object
                properties:
                  id:
                    description: The ID of the test at internet.nl. This can be used to view a report for your scan at internet.nl
                    type: integer
                  address:
                    description: Direct url to the report on internet.nl.
                    type: string
                    format: url
                    # todo: is this example url correct?
                    example: "https://api.internet.nl/web/api.internet.nl/4423123/"
              results:
                description: "Results are keyed by test_id, for example web_ipv6_ns_address. The ID is formatted as <^[a-z_]*$>."
                type: object
                additionalProperties:
                  "$ref": "#/components/schemas/Result"
              derived_results:
                type: object
                description: "A derived result is a result created based on a number of calculations of other results.
                A derived result shares the same result format. Its uses are for example to derive a conclusion about
                a group of results into a single result (such as a category like 'IPv6')."
                additionalProperties:
                  "$ref": "#/components/schemas/Result"

    scan_result_metadata:
      description: Contains extensive information on how scan results can be represented
        in reports. Describes scan results.

      type: object
      additionalProperties:
        x-additionalPropertiesName: test
        type: object
        description: Metadata associated with a test. The property name is an identifier, formatted with <^[a-z_]*$>. These mostly match the results and derived results.
        externalDocs:
          # todo: will the docs be here?
          url: https://api.internet.nl/v2.0/documentation/results
        properties:
          # Design decision:
          # This was suggested to be called "sub_test". This has been removed due to the hierarchy not being relevant.
          # In common conversations these things are also called tests. And the road to sub_sub_sub test is not one
          # that we want to go to.
          # Design decision:
          # They key itself is the test_id.
          # test:
          #  $ref: '#/components/schemas/test_id'
          description:
            type: string
            description: Free formatted text to briefly describe the test. Only used for easier memorization. Refer to documentation for exact test implementation and considerations.
            example: IPv6 addresses for name servers
          type:
            description: "Determines how this field should be implemented. There are currently three types:

            * test: A test that has been performed, which has a verdict and such.

            * category: A derived result from tests, which also has a verdict and such. This summarizes a series of tests.

            * informational: An item in the hierarchy that does not have a (derived) test result attached to it. These are headers and intros to categories.

            "
            type: string
            enum: [test, category, informational]
            example: test
          documentation:
            type: string
            description: Resource location of the documentation of the field. Shows
              what all possible values can be.
            # todo: will the docs be here?
            example: https://api.internet.nl/v2/documentation/results#mail_ipv6_ns_address
            format: uri
          verdict_test_result_mapping:
            description: "All possible verdicts a test can have. The verdicts map to translations which contain an extended explanation of the result. The test_result is a classification of the verdict. The verdict is the key, which is formatted as an identifier: <^[a-z_]*$>"
            type: object
            additionalProperties:
              x-additionalPropertiesName: verdict
              type: object
              properties:
                # Design compromise:
                # This is the key. OAS does not have options to specify a format for this key. Therefore it's documented.
                # verdict:
                #   example: "bad"
                #  allOf:
                #  - $ref: '#/components/schemas/identifier'
                test_result:
                  example: "fail"
                  allOf:
                    - $ref: '#/components/schemas/identifier'
                translation:
                  type: "object"
                  properties:
                    key:
                      type: string
                      example: passed
            required: verdict, test_result
            example:
              good: {test_result: pass, translation: {key: good}}
              bad: {test_result: fail, translation: {key: bad}}
              other: {test_result: fail, translation: {key: other}}
        allOf:
          - $ref: '#/components/schemas/verbose_properties'

    verbose_properties:
      properties:
        hierarchy:
          type: object
          description: The hierarchy contains the order of tests on internet.nl.
            The hierarchy is stored separately from the data, to make parsing of
            data easier. The hierarchy might change over versions, while tests names
            stay the same.
          properties:
            human:
              description: A loosely describing and structured format that explains
                the system hierarchy to humans. This helps understanding the place
                of a test.
              example: "/web/ipv6/nameserver/address"
              type: string
            system:
              description: The system hierarchy is a comparable list of integers.
                When ordered from small to large, the same order is created as used
                on internet.nl and the internet.nl dashboard. If something is four levels deep,
                there are four levels where the correct order is being maintained.
              type: array
              example:
                - 1
                - 1
                - 1
                - 1
              items:
                type: integer
        translation:
          type: object
          description: Information to retrieve the correct translation from the
            internet.nl sources. This can be used to translate the scan (title,
            description, technical_details), as well as the result when used in
            conjunction with the verdict key.
          properties:
            key:
              type: string
              example: web-mail_ipv6_ns-AAAA
    Result:
      x-additionalPropertiesName: test_id
      type: object
      properties:
        # Design decision:
        # As with domains and tests in metadata, the redundant test name is removed.
        # test:
        #   $ref: '#/components/schemas/test_id'
        verdict:
          type: string
          example: good
          description: The plain result of a test. This result can also be used for translation.
          allOf:
            - $ref: '#/components/schemas/identifier'
          enum:
            - bad_unsupported_ds_algo
            - bogus
            - good
            - na
            - not_tested
            - ok
            - other
            - phase_out
            - resolver_error
            - seclevel_bad
            - servfail
            - warning
        test_result:
          description: Classifies the result to how a result should be represented. Is provided for convenience, as the test_result can also be derived from the mapping in the metadata.
          type: string
          example: pass
          allOf:
            - $ref: '#/components/schemas/identifier'
          enum:
            - pass
            - fail
            - info
            - warning
            - not_applicable
            - not_tested
        translation:
          description: "Key to translate the verdict, used together with the translation key. The format is: f'{test_translation_key}_verdict_{verdict_translation_key}' This can also be retrieved from the verdict mapping."
          type: object
          properties:
            key:
              type: string
        technical_details:
          type: object
          properties:
            data_matrix:
              description: A table with data. Use the translation key + tech_table to retrieve the column names of the data. The data can have a several columns and rows.
              type: array
              items:
                type: array
                items:
                  description: Actual values are represented as strings.
                  type: string
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
paths:
  # Design Decision:
  # Dutch API spec requires the plural form to be used.
  "/scans":
    post:
      security:
        - basic: []
      description: Register a new scan. Registration means that the scan has not been checked or validated. Use the returned id in a status request to track progress.
      operationId: register
      x-code-samples:
        - lang: Python
          source: "import requests

      from requests.auth import HTTPBasicAuth

      # set: api_url, username, password

      data = {'type': 'web', 'tracking_information': 'My first test.', 'domains': ['internet.nl', 'api.internet.nl', 'dashboard.internet.nl']}

      response = requests.post(f'{api_url}/scans/', data=data, auth=HTTPBasicAuth(username, password))

      response.raise_for_status()

      answer = response.json()

      scan_id = answer['id']

      print(scan_id)
      "
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/scan_type'
                tracking_information:
                  $ref: '#/components/schemas/tracking_information'
                domains:
                  $ref: '#/components/schemas/list_of_domains'
              required:
                - domains
                - type
      responses:
        '200':
          description: Scan registered successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Scan"
          links:
            status:
              operationId: status
              parameters:
                scan_id: '$response.body#/id'
              description: The scan_id retrieved from creating a scan can be used to retrieve the status and scan result.
        '500':
          description: The server could not handle your request at this time. Try again later.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  # Design decision
  # Metadata tries to make implicit decisions explicit.
  "/scans/metadata/":
    get:
      security:
        - basic: []
      operationId: metadata
      description: Machine readable metadata on documentation, translation, display etc. This can be used to create reports equivalent to internet.nl.
      x-code-samples:
        - lang: Python
          source: "response = requests.get(f'{api_url}/scans/metadata', auth=HTTPBasicAuth(username, password))

            response.raise_for_status()

            answer = response.json()

            print(answer[0]['test'])
            "
      responses:
        '200':
          description: Metadata information of a scan. This applies to all fields.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/scan_result_metadata"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  # Design decision
  # The dutch api spec state that the client can track the state.
  # By separating state from the request, it's possible to more clearly show the scanning flow and define a more clear API.
  "/scans/status/{scan_id}":
    get:
      security:
        - basic: []
      operationId: status
      description: Retrieve information about the progress of the scan.
      x-code-samples:
        - lang: Python
          source: "from time import sleep

          response = requests.get(f'{api_url}/scans/status/{scan_id}', auth=HTTPBasicAuth(username, password))

          response.raise_for_status()

          while response['status'] != 'finished':

              response = requests.get(f'{api_url}/scans/status/{scan_id}', auth=HTTPBasicAuth(username, password))

              response.raise_for_status()

              sleep(30)

          print('Scan finished.')
          "
      parameters:
        - name: scan_id
          schema:
            $ref: '#/components/schemas/scan_id'
          in: path
      responses:
        '200':
          description: Track the status of a scan.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/scan_status"
        '512':
          description: Track the status of a scan.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/scan_error_status"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  "/scans/result/{scan_id}":
    get:
      security:
        - basic: []
      operationId: result
      description: Retrieve scan result information.
      x-code-samples:
        - lang: Python
          source: "response = requests.get(f'{api_url}/scans/result/{scan_id}', auth=HTTPBasicAuth(username, password))

response.raise_for_status()

answer = response.json()

print(answer['id'])
"
      parameters:
        - name: scan_id
          schema:
            $ref: '#/components/schemas/scan_id'
          in: path
      responses:
        '200':
          description: Scan result
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/scan_result"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
